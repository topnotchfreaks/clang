name: Build Clang 20 Kernel Toolchain

on:
  workflow_dispatch:

jobs:
  build:
    name: Create Android Kernel Clang 20 Toolchain
    runs-on: ubuntu-latest

    env:
      CLANG_VENDOR: "TopNotchFreaks "
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set Version
      id: version
      run: echo "tag=tnf-clang20-$(date +'%Y%m%d-%H%M')" >> "$GITHUB_OUTPUT"

    - name: Download Pre-built Clang 20
      run: |
        # Download official LLVM 20 release
        wget -q https://github.com/llvm/llvm-project/releases/download/llvmorg-20.0.0/clang+llvm-20.0.0-x86_64-linux-gnu-ubuntu-22.04.tar.xz
        
        # Extract
        tar -xf clang+llvm-20.0.0-x86_64-linux-gnu-ubuntu-22.04.tar.xz
        mv clang+llvm-20.0.0-x86_64-linux-gnu-ubuntu-22.04 clang-20

    - name: Optimize Toolchain
      run: |
        cd clang-20
        
        # Remove unnecessary components to reduce size
        rm -rf share/doc share/man include libexec
        rm -rf lib/cmake lib/clang/*/include/cuda_wrappers
        rm -rf lib/clang/*/include/openmp_wrappers
        
        # Keep only essential binaries
        cd bin
        KEEP_BINS="clang clang++ clang-20 lld ld.lld llvm-ar llvm-nm llvm-objcopy llvm-strip llvm-objdump llvm-readelf"
        
        # Remove everything except essential binaries
        for bin in *; do
          if [[ ! " $KEEP_BINS " =~ " $bin " ]]; then
            rm -f "$bin"
          fi
        done
        
        # Create symlinks for missing tools
        ln -sf clang clang-cpp
        ln -sf lld ld64.lld
        ln -sf llvm-objcopy llvm-objcopy-20
        ln -sf llvm-strip llvm-strip-20

    - name: Create Android Kernel Wrappers
      run: |
        cd clang-20/bin
        
        # AArch64 kernel wrapper
        cat > aarch64-linux-android-clang << 'EOF'
        #!/bin/bash
        
        KERNEL_FLAGS=(
          -target aarch64-linux-gnu
          -fcolor-diagnostics
          -fintegrated-as
          -fno-builtin
          -fno-PIE
          -nostdinc
          -mgeneral-regs-only
          -mno-global-merge
          -mno-implicit-float
          -fno-delete-null-pointer-checks
          -fno-stack-protector
          -fno-common
          -pipe
          -O2
          -fomit-frame-pointer
          -Wno-unused-command-line-argument
          -Wno-gnu
          -Wno-asm-operand-widths
          -Wno-initializer-overrides
          -Wno-tautological-constant-out-of-range-compare
          -Wno-address-of-packed-member
          -Wno-tautological-compare
          -Wno-constant-logical-operand
        )
        
        exec "$(dirname "$0")/clang" "${KERNEL_FLAGS[@]}" "$@"
        EOF
        
        # ARM kernel wrapper
        cat > arm-linux-android-clang << 'EOF'
        #!/bin/bash
        
        KERNEL_FLAGS=(
          -target arm-linux-gnueabi
          -fcolor-diagnostics
          -fintegrated-as
          -fno-builtin
          -fno-PIE
          -nostdinc
          -mno-global-merge
          -mno-implicit-float
          -fno-delete-null-pointer-checks
          -fno-stack-protector
          -fno-common
          -pipe
          -O2
          -fomit-frame-pointer
          -Wno-unused-command-line-argument
          -Wno-gnu
          -Wno-asm-operand-widths
          -Wno-initializer-overrides
          -Wno-tautological-constant-out-of-range-compare
          -Wno-address-of-packed-member
          -Wno-tautological-compare
          -Wno-constant-logical-operand
        )
        
        exec "$(dirname "$0")/clang" "${KERNEL_FLAGS[@]}" "$@"
        EOF
        
        # X86_64 kernel wrapper
        cat > x86_64-linux-android-clang << 'EOF'
        #!/bin/bash
        
        KERNEL_FLAGS=(
          -target x86_64-linux-gnu
          -fcolor-diagnostics
          -fintegrated-as
          -fno-builtin
          -fno-PIE
          -nostdinc
          -mno-global-merge
          -mno-implicit-float
          -fno-delete-null-pointer-checks
          -fno-stack-protector
          -fno-common
          -pipe
          -O2
          -fomit-frame-pointer
          -Wno-unused-command-line-argument
          -Wno-gnu
          -Wno-asm-operand-widths
          -Wno-initializer-overrides
          -Wno-tautological-constant-out-of-range-compare
          -Wno-address-of-packed-member
          -Wno-tautological-compare
          -Wno-constant-logical-operand
        )
        
        exec "$(dirname "$0")/clang" "${KERNEL_FLAGS[@]}" "$@"
        EOF
        
        # Make wrappers executable
        chmod +x aarch64-linux-android-clang arm-linux-android-clang x86_64-linux-android-clang
        
        # Create compatibility symlinks
        ln -sf aarch64-linux-android-clang aarch64-linux-gnu-clang
        ln -sf arm-linux-android-clang arm-linux-gnueabi-clang
        ln -sf x86_64-linux-android-clang x86_64-linux-gnu-clang
        ln -sf clang kernel-clang

    - name: Test Kernel Compilation
      run: |
        cd clang-20/bin
        
        # Create simple test module
        cat > test_module.c << 'EOF'
        #define __KERNEL__
        #define MODULE
        
        static int init_module(void) { return 0; }
        static void cleanup_module(void) { }
        
        char _license[] __attribute__((section(".modinfo"))) = "license=GPL";
        EOF
        
        # Test each architecture
        echo "Testing AArch64..."
        ./aarch64-linux-android-clang -c test_module.c -o test_aarch64.o
        
        echo "Testing ARM..."
        ./arm-linux-android-clang -c test_module.c -o test_arm.o
        
        echo "Testing X86_64..."
        ./x86_64-linux-android-clang -c test_module.c -o test_x86.o
        
        # Show results
        file test_*.o
        ls -la test_*.o

    - name: Strip and Package
      run: |
        # Strip binaries for smaller size
        strip clang-20/bin/* 2>/dev/null || true
        
        # Show final size
        echo "Toolchain size:"
        du -sh clang-20/
        
        # Package
        tar -czf android-kernel-clang20.tar.gz clang-20/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Android Kernel Clang 20 - ${{ steps.version.outputs.tag }}
        files: android-kernel-clang20.tar.gz
        body: |
          üî• **Android Kernel Optimized Clang 20**
          
          **Features:**
          - ‚ö° Pre-built LLVM 20.0.0 base
          - üéØ Android kernel specific optimizations
          - üõ†Ô∏è AArch64, ARM & X86_64 cross-compilation ready
          - üì¶ Optimized size (~30MB vs 200MB+)
          - üöÄ Fast build (minutes vs hours)
          
          **Wrapper Scripts:**
          - `aarch64-linux-android-clang` - AArch64 kernel compiler
          - `arm-linux-android-clang` - ARM kernel compiler
          - `x86_64-linux-android-clang` - X86_64 kernel compiler
          - `kernel-clang` - Generic kernel compiler
          
          **Usage:**
          ```bash
          export PATH=$PWD/clang-20/bin:$PATH
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- CC=aarch64-linux-android-clang
          ```
          
          **Targets:** AArch64, ARM, X86_64
          **Build Time:** < 5 minutes
          
          Ready for Android kernel compilation!
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}