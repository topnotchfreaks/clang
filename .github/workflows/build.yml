name: Build TNF Clang for Android Kernel

on:
  workflow_dispatch:

jobs:
  build:
    name: Build TNF Clang
    runs-on: ubuntu-latest

    env:
      LLVM_BRANCH: main
      CLANG_VENDOR: "TopNotchFreaks "
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set dynamic tag
      id: version
      run: echo "tag=tnfclang-$(date +'%Y.%m.%d-%H.%M.%S')" >> "$GITHUB_OUTPUT"

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y git cmake ninja-build python3 curl \
          gcc g++ zlib1g-dev libgmp-dev libmpfr-dev libmpc-dev \
          binutils binutils-dev binutils-gold xz-utils

    - name: Install matching LLVM version
      run: |
        sudo apt-get remove -y '^llvm-.*' '^clang-.*' '^lld-.*' llvm clang lld
        sudo apt-get autoremove -y
        sudo rm -rf /usr/lib/llvm-* /usr/lib/cmake/llvm

        sudo apt-get install -y wget software-properties-common
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 18
        sudo update-alternatives --install /usr/bin/ld ld /usr/bin/ld.lld-18 100

        sudo update-alternatives --set ld /usr/bin/ld.lld-18

    - name: Verify LLVM Installation
      run: |
        echo "Clang version: $(clang-18 --version)"
        echo "LLD version: $(ld.lld-18 --version)"
        echo "Current linker: $(update-alternatives --list ld || true)"
        echo "Selected linker: $(readlink -f /usr/bin/ld)"

    - name: Cleanup LLVM Installation (Reduce Image Size)
      run: |
        # Remove unnecessary LLVM 18 components
        sudo apt-get remove -y llvm-18-tools lldb-18 libllvm18
        sudo apt-get autoremove -y
        sudo rm -rf /usr/lib/llvm-18/lib/*.a /usr/lib/llvm-18/share

    - name: Set Environment Variables
      run: |
        echo "CC=clang-18" >> $GITHUB_ENV
        echo "CXX=clang++-18" >> $GITHUB_ENV
        echo "LD=ld.lld-18" >> $GITHUB_ENV
        echo "AR=llvm-ar-18" >> $GITHUB_ENV
        echo "NM=llvm-nm-18" >> $GITHUB_ENV
        echo "STRIP=llvm-strip-18" >> $GITHUB_ENV
            
    - name: Set Clang as host compiler
      run: |
        export CC=clang
        export CXX=clang++
    
    - name: Clone LLVM
      run: |
        git clone --depth=1 https://github.com/llvm/llvm-project.git
        cd llvm-project
        git checkout ${{ env.LLVM_BRANCH }}

    - name: Configure LLVM for Android Kernel
      run: |
        mkdir llvm-build && cd llvm-build
        cmake -G Ninja ../llvm-project/llvm \
          -DLLVM_ENABLE_PROJECTS="clang;lld;polly" \
          -DLLVM_TARGETS_TO_BUILD="AArch64;ARM;X86" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_C_FLAGS="-Os -flto -fomit-frame-pointer -fvisibility=hidden" \
          -DCMAKE_CXX_FLAGS="-Os -flto -fomit-frame-pointer -fvisibility=hidden" \
          -DLLVM_USE_LINKER=lld \
          -DLLVM_ENABLE_ASSERTIONS=OFF \
          -DLLVM_ENABLE_ZLIB=ON \
          -DLLVM_INCLUDE_BENCHMARKS=OFF \
          -DLLVM_INCLUDE_TESTS=OFF \
          -DLLVM_INCLUDE_DOCS=OFF \
          -DLLVM_INCLUDE_EXAMPLES=OFF \
          -DLLVM_ENABLE_RUNTIMES="compiler-rt" \
          -DLLVM_BUILD_RUNTIME=OFF \
          -DLLVM_BUILD_LLVM_DYLIB=OFF \
          -DLLVM_LINK_LLVM_DYLIB=OFF \
          -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
          -DLLVM_BINUTILS_INCDIR=/usr/include \
          -DLLVM_ENABLE_LTO=Thin \
          -DLLVM_ENABLE_OCAMLDOC=OFF \
          -DLLVM_ENABLE_BINDINGS=OFF \
          -DCLANG_ENABLE_OBJC_REWRITER=OFF \
          -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
          -DCLANG_PLUGIN_SUPPORT=OFF \
          -DCLANG_VENDOR="${{ env.CLANG_VENDOR }}" \
          -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
          -DCLANG_DEFAULT_RTLIB=compiler-rt \
          -DCLANG_DEFAULT_UNWINDLIB=libunwind \
          -DCLANG_DEFAULT_LINKER=lld \
          -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/clang-install

    - name: Build LLVM/Clang
      run: |
        cd llvm-build
        ninja -j8

    - name: Install Toolchain
      run: |
        cd llvm-build
        ninja install

    - name: Minimize Toolchain Size
      run: |
        cd clang-install
        find . -name "*.a" -delete
        find . -name "*.la" -delete
        find . -name "*.o" -delete
        # Aggressive stripping
        find bin -type f -exec strip --strip-all {} + || true
        find lib -type f -name "*.so*" -exec strip --strip-all {} + || true
        rm -rf include share libexec man

    - name: Package Toolchain
      run: |
        cd clang-install
        tar -czf ../topnotchfreaks-android-clang.tar.gz .

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: TopNotchFreaks-clang - ${{ steps.version.outputs.tag }}
        files: topnotchfreaks-android-clang.tar.gz
        body: |
          üõ†Ô∏è **TopNotchFreaks Clang for Android Kernel Development**

          - Based on LLVM 21 (main branch)
          - Target: `AArch64 and x86` (Android Kernel Toolchains)
          - Optimized for building Android kernels
          - Stripped and lightweight (~lean install)

          Built on: `${{ steps.version.outputs.tag }}`
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
