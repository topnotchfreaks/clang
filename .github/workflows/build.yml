name: Build Clang

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Clang
    runs-on: ubuntu-latest

    env:
      LLVM_BRANCH: main
      CLANG_VENDOR: "TopNotchFreaks "
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set dynamic tag
      id: version
      run: echo "tag=tnfclang-$(date +'%Y.%m.%d-%H.%M.%S')" >> "$GITHUB_OUTPUT"

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y git cmake ninja-build python3 curl \
          gcc g++ zlib1g-dev libgmp-dev libmpfr-dev libmpc-dev \
          binutils binutils-dev binutils-gold xz-utils \
          gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
          libc6-dev-arm64-cross

    - name: Install Full Cross-Compilation Toolchain
      run: |
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu \
          libc6-dev-arm64-cross \
          libgcc-11-dev-arm64-cross \
          libstdc++-11-dev-arm64-cross
        sudo mkdir -p /usr/aarch64-linux-gnu/usr/lib
        sudo ln -s /usr/aarch64-linux-gnu/lib /usr/aarch64-linux-gnu/usr/lib

    - name: Install LLVM 20 as host compiler
      run: |
        sudo apt-get remove -y '^llvm-.*' '^clang-.*' '^lld-.*' llvm clang lld
        sudo apt-get autoremove -y
        sudo rm -rf /usr/lib/llvm-* /usr/lib/cmake/llvm

        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 20
        sudo apt-get install -y clang-20 lld-20 llvm-20

        # Create symlinks to versioned binaries
        sudo ln -sf /usr/bin/clang-20 /usr/bin/clang
        sudo ln -sf /usr/bin/clang++-20 /usr/bin/clang++
        sudo ln -sf /usr/bin/ld.lld-20 /usr/bin/ld.lld

        # Verify installation
        clang --version
        clang++ --version
        ld.lld --version

    - name: Set Environment Variables
      run: |
        echo "CC=/usr/bin/clang-20" >> $GITHUB_ENV
        echo "CXX=/usr/bin/clang++-20" >> $GITHUB_ENV
        echo "LD=/usr/bin/ld.lld-20" >> $GITHUB_ENV
        echo "AR=/usr/bin/llvm-ar-20" >> $GITHUB_ENV
        echo "NM=/usr/bin/llvm-nm-20" >> $GITHUB_ENV
        echo "STRIP=/usr/bin/llvm-strip-20" >> $GITHUB_ENV

    - name: Verify LLVM Installation
      run: |
        echo "Clang version: $(clang --version)"
        echo "LLD version: $(ld.lld --version)"
        echo "Current linker: $(update-alternatives --list ld || true)"
        echo "Selected linker: $(readlink -f /usr/bin/ld)"

    - name: Clone LLVM
      run: |
        git clone --depth=1 https://github.com/llvm/llvm-project.git
        cd llvm-project
        git checkout ${{ env.LLVM_BRANCH }}

    - name: Configure LLVM for Android Kernel (Optimized)
      run: |
        mkdir llvm-build && cd llvm-build
        cmake -G Ninja ../llvm-project/llvm \
          -DLLVM_ENABLE_PROJECTS="clang;lld;bolt;polly;compiler-rt" \
          -DLLVM_TARGETS_TO_BUILD="AArch64;ARM" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=/usr/bin/clang-20 \
          -DCMAKE_CXX_COMPILER=/usr/bin/clang++-20 \
          -DCMAKE_ASM_COMPILER=/usr/bin/clang-20 \
          -DCMAKE_C_FLAGS="-Os -fomit-frame-pointer" \
          -DCMAKE_CXX_FLAGS="-Os -fomit-frame-pointer" \
          -DLLVM_USE_LINKER=lld \
          -DLLVM_ENABLE_ASSERTIONS=OFF \
          -DLLVM_ENABLE_LTO=Thin \
          -DLLVM_PROFDATA_FILE="$PWD/profdata.prof" \
          -DLLVM_ENABLE_ZLIB=ON \
          -DLLVM_ENABLE_RUNTIMES="compiler-rt" \
          -DLLVM_BUILD_RUNTIME=OFF \
          -DLLVM_INCLUDE_TESTS=OFF \
          -DLLVM_INCLUDE_DOCS=OFF \
          -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
          -DLLVM_BINUTILS_INCDIR=OFF \
          -DLLVM_ENABLE_PLUGINS=OFF \
          -DCLANG_VENDOR="${{ env.CLANG_VENDOR }}" \
          -DCLANG_DEFAULT_LINKER=lld \
          -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
          -DCLANG_PLUGIN_SUPPORT=OFF \
          -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/clang-install \
          -DCOMPILER_RT_BUILD_PROFILE=ON \
          -DCOMPILER_RT_BUILD_BUILTINS=ON \
          -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE=aarch64-linux-gnu

    - name: Build LLVM/Clang
      run: |
        cd llvm-build
        ninja -j$(nproc) clang lld Polly bolt compiler-rt install-compiler-rt

    - name: Generate PGO Profiles
      run: |
        cd llvm-build
        TARGET_TRIPLE="aarch64-linux-gnu"

        # Create test program
        echo -e '#include <stdio.h>\nint main(){printf("PGO test\\n");return 0;}' > pgo_test.c

        # Build with explicit runtime library paths
        ./bin/clang -O2 -fprofile-generate \
          --target=$TARGET_TRIPLE \
          --sysroot=/usr/aarch64-linux-gnu \
          --gcc-toolchain=/usr \
          -B/usr/lib/gcc-cross/aarch64-linux-gnu/11 \
          -L/usr/aarch64-linux-gnu/lib \
          -L/usr/lib/gcc-cross/aarch64-linux-gnu/11 \
          -L$GITHUB_WORKSPACE/clang-install/lib/clang/21/lib/aarch64-unknown-linux-gnu \
          pgo_test.c -o pgo_test \
          -fuse-ld=lld \
          -rtlib=compiler-rt \
          -Wl,--rpath=$GITHUB_WORKSPACE/clang-install/lib/clang/21/lib/aarch64-unknown-linux-gnu

        # Run via QEMU
        sudo apt-get install -y qemu-user
        qemu-aarch64 -L /usr/aarch64-linux-gnu ./pgo_test

        # Merge profiles
        ./bin/llvm-profdata merge -output=profdata.prof default_*.profraw

    - name: Rebuild with PGO
      run: |
        cd llvm-build
        ninja clean
        cmake -DLLVM_PROFDATA_FILE="$PWD/profdata.prof" .
        ninja -j$(nproc)

    - name: Apply BOLT
      run: |
        cd llvm-build
        ./bin/llvm-bolt ./bin/clang -o ./bin/clang.bolt -data=./clang.fdata \
          -reorder-blocks=ext-tsp -reorder-functions=hfsort+ -split-functions=3
        mv ./bin/clang.bolt ./bin/clang

    - name: Install Toolchain
      run: |
        cd llvm-build
        ninja install

    - name: Minimize Installation
      run: |
        cd clang-install
        # Keep only essential binaries
        find bin -type f | grep -Ev 'clang|clang\+\+|lld|llvm-ar|llvm-nm|llvm-strip|llvm-bolt' | xargs rm -f
        # Aggressive stripping
        find bin -type f -exec strip --strip-all {} +
        # Remove unused files
        rm -rf include lib/*.a share libexec

    - name: Package Toolchain
      run: |
        cd clang-install
        tar -czf ../topnotchfreaks-android-clang.tar.gz .

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: TopNotchFreaks-clang - ${{ steps.version.outputs.tag }}
        files: topnotchfreaks-android-clang.tar.gz
        body: |
          üõ†Ô∏è **TopNotchFreaks Clang for Android Kernel Development**

          - Based on LLVM 21 (main branch)
          - Target: `AArch64 and x86` (Android Kernel Toolchains)
          - Optimized for building Android kernels
          - Stripped and lightweight (~lean install)

          Built on: `${{ steps.version.outputs.tag }}`
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
